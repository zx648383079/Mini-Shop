"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("./util");
var types_1 = require("./types");
var app = getApp();
function request(method, requestHandler) {
    var url = requestHandler.url, params = requestHandler.params, data = requestHandler.data, headers = requestHandler.headers, mask = requestHandler.mask, loading = requestHandler.loading;
    if (loading === undefined || loading) {
        wx.showLoading && wx.showLoading({ title: 'Loading...', mask: mask ? mask : false });
    }
    var configs = util.getAppParams();
    if (!params) {
        params = {};
    }
    if (!headers) {
        headers = {};
    }
    params.appid = configs.appid;
    params.timestamp = configs.timestamp;
    params.sign = configs.sign;
    var token = wx.getStorageSync(types_1.TOKEN_KEY);
    if (token) {
        headers.Authorization = 'Bearer ' + token;
    }
    return new Promise(function (resolve, reject) {
        wx.request({
            url: util.uriEncode(util.apiEndpoint + url, params),
            data: data,
            method: ['GET', 'POST', 'PATCH', 'PUT', 'DELETE'].indexOf(method) > -1 ? method : 'GET',
            header: Object.assign({
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            }, headers),
            success: function (res) {
                var data = res.data, statusCode = res.statusCode;
                if (statusCode === 200) {
                    resolve(data);
                    return;
                }
                wx.showToast({
                    title: data.message,
                    icon: 'none',
                    duration: 2000
                });
                if (statusCode === 401) {
                    app.globalData.userInfo = undefined;
                    wx.removeStorageSync(types_1.TOKEN_KEY);
                    wx.navigateTo({
                        url: 'page/member/login'
                    });
                }
                reject(res);
            },
            fail: function () {
                reject('Network request failed');
            },
            complete: function () {
                wx.hideLoading && wx.hideLoading();
            }
        });
    });
}
exports.request = request;
function fetch(url, params) {
    if (params === void 0) { params = {}; }
    return request('GET', {
        url: url,
        params: params
    });
}
exports.fetch = fetch;
function post(url, data) {
    if (data === void 0) { data = {}; }
    return request('POST', {
        url: url,
        data: data
    });
}
exports.post = post;
function deleteRequest(url) {
    return request('DELETE', {
        url: url,
    });
}
exports.deleteRequest = deleteRequest;
function put(url, data) {
    if (data === void 0) { data = {}; }
    return request('PUT', {
        url: url,
        data: data
    });
}
exports.put = put;
//# sourceMappingURL=data:application/json;base64,