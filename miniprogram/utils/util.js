"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts_md5_1 = require("ts-md5");
exports.apiEndpoint = 'http://zodream.localhost/open/';
exports.assetUri = 'http://zodream.localhost';
exports.appId = '11543906547';
exports.secret = '012e936d3d3653b40c6fc5a32e4ea685';
function getAppParams() {
    var timestamp = getCurrentTime();
    var sign = ts_md5_1.Md5.hashStr(exports.appId + timestamp + exports.secret) + '';
    return {
        appid: exports.appId,
        timestamp: timestamp,
        sign: sign,
    };
}
exports.getAppParams = getAppParams;
function formatTime(date) {
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();
    return [year, month, day].map(twoPad).join('-') + ' ' + [hour, minute, second].map(twoPad).join(':');
}
exports.formatTime = formatTime;
function getCurrentTime() {
    return formatTime(new Date());
}
exports.getCurrentTime = getCurrentTime;
function twoPad(n) {
    var str = n.toString();
    return str[1] ? str : '0' + str;
}
exports.twoPad = twoPad;
function each(data, cb) {
    if (typeof data !== 'object') {
        return cb(data, 0);
    }
    if (data instanceof Array) {
        for (var i = 0; i < data.length; i++) {
            if (cb(data[i], i) === false) {
                return;
            }
        }
        return;
    }
    for (var key in data) {
        if (data.hasOwnProperty(key)) {
            if (cb(data[key], key) === false) {
                return;
            }
        }
    }
}
exports.each = each;
function uriEncode(path, obj, unEncodeURI) {
    if (obj === void 0) { obj = {}; }
    var result = [];
    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var name = _a[_i];
        var value = obj[name];
        result.push(name + '=' + (unEncodeURI ? value : encodeURIComponent(value)));
    }
    if (result.length < 1) {
        return path;
    }
    return path + (path.indexOf('?') > 0 ? '&' : '?') + result.join('&');
}
exports.uriEncode = uriEncode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBNkI7QUFFaEIsUUFBQSxXQUFXLEdBQUcsZ0NBQWdDLENBQUM7QUFDL0MsUUFBQSxRQUFRLEdBQUcsMEJBQTBCLENBQUM7QUFDdEMsUUFBQSxLQUFLLEdBQUcsYUFBYSxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLGtDQUFrQyxDQUFDO0FBUXpELFNBQWdCLFlBQVk7SUFDeEIsSUFBTSxTQUFTLEdBQUcsY0FBYyxFQUFFLENBQUM7SUFDbkMsSUFBTSxJQUFJLEdBQUcsWUFBRyxDQUFDLE9BQU8sQ0FBQyxhQUFLLEdBQUcsU0FBUyxHQUFHLGNBQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMxRCxPQUFPO1FBQ0gsS0FBSyxFQUFFLGFBQUs7UUFDWixTQUFTLFdBQUE7UUFDVCxJQUFJLE1BQUE7S0FDUCxDQUFDO0FBQ04sQ0FBQztBQVJELG9DQVFDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLElBQVU7SUFDbkMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQy9CLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDakMsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzFCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUM1QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDaEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBRWhDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3RHLENBQUM7QUFURCxnQ0FTQztBQUVELFNBQWdCLGNBQWM7SUFDNUIsT0FBTyxVQUFVLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFGRCx3Q0FFQztBQUVELFNBQWdCLE1BQU0sQ0FBQyxDQUFTO0lBQzlCLElBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUN4QixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO0FBQ2pDLENBQUM7QUFIRCx3QkFHQztBQUVELFNBQWdCLElBQUksQ0FBQyxJQUFTLEVBQUUsRUFBcUQ7SUFDbkYsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDMUIsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3RCO0lBQ0QsSUFBSSxJQUFJLFlBQVksS0FBSyxFQUFFO1FBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQzFCLE9BQU87YUFDVjtTQUNKO1FBQ0QsT0FBTztLQUNWO0lBQ0QsS0FBSyxJQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDcEIsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzFCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQzlCLE9BQU87YUFDVjtTQUNKO0tBQ0o7QUFDSCxDQUFDO0FBbkJELG9CQW1CQztBQUVELFNBQWdCLFNBQVMsQ0FBRSxJQUFZLEVBQUUsR0FBYSxFQUFFLFdBQXFCO0lBQXBDLG9CQUFBLEVBQUEsUUFBYTtJQUNsRCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFDZixLQUFpQixVQUFnQixFQUFoQixLQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQWhCLGNBQWdCLEVBQWhCLElBQWdCLEVBQUU7UUFBOUIsSUFBSSxJQUFJLFNBQUE7UUFDVCxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM5RTtJQUNELElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUNELE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBVkQsOEJBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZDUgfSBmcm9tICd0cy1tZDUnO1xuXG5leHBvcnQgY29uc3QgYXBpRW5kcG9pbnQgPSAnaHR0cDovL3pvZHJlYW0ubG9jYWxob3N0L29wZW4vJztcbmV4cG9ydCBjb25zdCBhc3NldFVyaSA9ICdodHRwOi8vem9kcmVhbS5sb2NhbGhvc3QnO1xuZXhwb3J0IGNvbnN0IGFwcElkID0gJzExNTQzOTA2NTQ3JztcbmV4cG9ydCBjb25zdCBzZWNyZXQgPSAnMDEyZTkzNmQzZDM2NTNiNDBjNmZjNWEzMmU0ZWE2ODUnO1xuXG5pbnRlcmZhY2UgSUFwcFBhcmFtIHtcbiAgICBhcHBpZDogc3RyaW5nLFxuICAgIHRpbWVzdGFtcDogc3RyaW5nLFxuICAgIHNpZ246IHN0cmluZyxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcFBhcmFtcygpOiBJQXBwUGFyYW0ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IGdldEN1cnJlbnRUaW1lKCk7XG4gICAgY29uc3Qgc2lnbiA9IE1kNS5oYXNoU3RyKGFwcElkICsgdGltZXN0YW1wICsgc2VjcmV0KSArICcnO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwcGlkOiBhcHBJZCxcbiAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICBzaWduLFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUaW1lKGRhdGU6IERhdGUpOiBzdHJpbmcge1xuICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpXG4gIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMVxuICBjb25zdCBkYXkgPSBkYXRlLmdldERhdGUoKVxuICBjb25zdCBob3VyID0gZGF0ZS5nZXRIb3VycygpXG4gIGNvbnN0IG1pbnV0ZSA9IGRhdGUuZ2V0TWludXRlcygpXG4gIGNvbnN0IHNlY29uZCA9IGRhdGUuZ2V0U2Vjb25kcygpXG5cbiAgcmV0dXJuIFt5ZWFyLCBtb250aCwgZGF5XS5tYXAodHdvUGFkKS5qb2luKCctJykgKyAnICcgKyBbaG91ciwgbWludXRlLCBzZWNvbmRdLm1hcCh0d29QYWQpLmpvaW4oJzonKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gIHJldHVybiBmb3JtYXRUaW1lKG5ldyBEYXRlKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdvUGFkKG46IG51bWJlcik6IHN0cmluZyB7XG4gIGNvbnN0IHN0ciA9IG4udG9TdHJpbmcoKVxuICByZXR1cm4gc3RyWzFdID8gc3RyIDogJzAnICsgc3RyXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYWNoKGRhdGE6IGFueSwgY2I6ICh2YWw6IGFueSwga2V5OiBzdHJpbmcgfCBudW1iZXIpID0+IGJvb2xlYW58IHZvaWQpIHtcbiAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGNiKGRhdGEsIDApO1xuICB9XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChjYihkYXRhW2ldLCBpKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaWYgKGNiKGRhdGFba2V5XSwga2V5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXJpRW5jb2RlIChwYXRoOiBzdHJpbmcsIG9iajogYW55ID0ge30sIHVuRW5jb2RlVVJJPzogYm9vbGVhbikge1xuICAgIGxldCByZXN1bHQgPSBbXVxuICAgIGZvciAobGV0IG5hbWUgb2YgT2JqZWN0LmtleXMob2JqKSkge1xuICAgICAgICBsZXQgdmFsdWUgPSBvYmpbbmFtZV07XG4gICAgICAgIHJlc3VsdC5wdXNoKG5hbWUgKyAnPScgKyAodW5FbmNvZGVVUkkgPyB2YWx1ZSA6IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpKVxuICAgIH1cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIHJldHVybiBwYXRoICsgKHBhdGguaW5kZXhPZignPycpID4gMCA/ICcmJyA6ICc/JykgKyByZXN1bHQuam9pbignJicpO1xufVxuXG5cblxuIl19